#+OPTIONS: ^:{}
* Master Emacs in one year                                                      :emacs:en:
#+OPTIONS: toc:nil
  :PROPERTIES:
  :ID:       o2b:24796fba-6de7-4712-b83e-b86969c31335
  :POST_DATE: [2012-01-31 Tue 15:08]
  :POSTID:   268
  :ARCHIVE_TIME: 2012-12-26 Wed 19:21
  :ARCHIVE_FILE: ~/projs/mastering-emacs-in-one-year-guide/guide-zh.org
  :ARCHIVE_CATEGORY: emacs
  :END:
Author: Chen Bin (redguardtoo)

Version: 20140726

Updated: <2014-07-26 Sat>

Created: [2012-01-31 Tue 15:08]

Copyright: This work is licensed under the [[http://creativecommons.org/licenses/by-nc-nd/3.0/][Creative Commons Attribution-NonCommercial-NoDerivs 3.0 Unported License]].

** Introduction
I was a Microsoft fan for many years because I was born in China. There was no Unix culture when I was young. My professor knew as much as I knew about Unix. Zero knowledge. Nothing. I believed Microsoft Windows was the only platform worth developing software on. I believed Visual Studio was the best IDE in the world. I was so loyal to Microsoft that I used Visual Studio to edit code running on Linux server during my first job.

Besides, computers scared me to death. I'm ashamed to admit now that when I graduated from university I didn't know clipboard. If I need input duplicated texts, I typed them character by character. I chose an IT career simply for money. There was no other career path for talented young people in China then.

The points,
- This guide is about using Emacs as a professional's tool. I will not show off Emacs as a geek's toy because as you can see I am NOT that type from the beginning. I will focus on philosophy and methodology only. No technical details involved.
- If a computer dummy like me can [[https://github.com/redguardtoo][be good at Emacs in one year]], you definitely can do better.

** Why Emacs (OPTIONAL)
I keep this section short because the focus is HOW instead WHY.
*** Once you have mastered Emacs, you are good at all other editors
You have already tasted the best. You general expection on a decent text editor is higher than other editors actually implement.

Advanced tips in non-emacs guy's eyes are regarded as common sense in the Emacs master's eyes.

Let's use package management as an example.

The Emacs master expect any decent text editor should have a package manager so she can install package easily. She is surprised that [[https://sublime.wbond.net/installation][package manager is NOT bundled in some editor]].

If a package is broken, it could be [[http://www.gnu.org/software/emacs/manual/html_node/elisp/Advising-Functions.html][easily fixed by the package user]] without touching the package's original code.

Sometimes bad things happen. The remote repository could be shut down. Emacs people expects she can [[https://github.com/redguardtoo/myelpa][create her own repository on her USB drive]] [[https://github.com/redguardtoo/elpa-mirror][in one minute]].

In summary, a Emacs people knows much more advanced tip than other popular editors can implement.
*** Community behind Emacs is strong
Emacs is written in Lisp. Here is an example of its syntax:
#+BEGIN_SRC elisp
(+ (/ 4 5 ) 9)
(concat "hello" "world")
#+END_SRC

A developer who picks up Lisp is possibly more intelligent. Lisp's syntax is not similar to other languages, as I have shown. The fact that she can get out of her comfort zone of "if/for/while" and try to love parentheses proves that she is more curious than average people. Great curiosity is certainly first-ever linked to great intelligence.

Average developer can learn new languages (even non-mainsteam languages), but he will stay close to his comfort zone. A PHP guy will learn Python because they are both interpreted language. That PHP guy will not try Java because he is afraid of compiled language.

A Lisp developer may also be more experienced because Lisp could be the third language she learns (Java/C/C# to pay the bill. Bash/Python/Perl/Ruby to glue the system. Lisp is the third).

No job ad will list Emacs as a required skill. That's actually a good thing. It ensures that only honest technical guys exist in Emacs community.
*** Emacs can get job done quickly
IDE is usually optimized for special programming language or application framework. But Emacs is much more powerful on general work flow.

When people say IDE is good for programming. They are usually talking about code navigation, code completion and real time documentation lookup.

For solving the hardest and general design problem, we usually spend more time on reading, investigation and communication. A typical workflow is like paste prototype code into [[http://pastebin.com/]] or [[https://gist.github.com/]], ask people in IRC, search in stackoverflow and paste the code back. Emacs has support for IRC and browser (w3m). So the workflow could be followed easily.

I have more than 10 year experience on commercial IDEs. Trust me, Emacs is better for most programming tasks.

As a proof, check out the video demos of Emacs operation below:
- [[http://www.youtube.com/watch?v=Ho6nMWGtepY][Writing PPT with org-mode and beamer in Emacs ]]
- [[http://www.youtube.com/watch?v=EQAd41VAXWo][Emacs Power: Can your editor do THIS! ]]
*** Emacs is maintained by Free Software Foundation (FSF)
FSF has been around for almost 40 years. I assume it will exist for next 40 years. So Emacs will live for a very long time. My investment on Emacs will never expire.
*** No overhead
Pro:
- Emacs is open sourced 
- it supports all platforms.
- it's configuration is simple text

So I can work at any environment in five minutes with Emacs. For example, on windows I only need download one portable Emacs executable.

I used to work for a project which required me editing perl/java/C/bash/SQL code at the same time. The code is hosted on some remote sever far way from my office. We have the slowest connection in the world so we do all the work in command line and shell. Emacs is the only choice.

*** Take advantage of your spare time in one year
When I say Emacs takes you one year, I mean *your spare time* of one year to master Emacs. The definition of mastery is as described above, "Once you have mastered Emacs, every other text editor is easy".

BTW, I encourage you using any other text editor after one year if you want to help unbelievers to understand the definition of "mastery".
*** What matters is Attitude
How good you will be at Emacs is determined by your attitude,

Tips:
- Be open minded. For example, why not try Vim key binding after being familiar with Emacs default key binding. Or vice versa.
- Bettering yourself is the purpose. For example, there are several good plugins to do the sub-windows navigation. Spend some time to use them all to find the most efficient one though the difference the best and average is only one less key strike.
- Half a tale is enough for a wise man. For example, when a guy showed off [[http://www.sublimetext.com/][Sublime Text]] to me, I realized that there should exist [[https://github.com/alloy-d/color-theme-molokai][similar beautiful skin]] in Emacs and I immediately switched my Emacs color theme.
** Step by Step Guide
*** Quick guide for greenhands of Linux/Unix (OPTIONAL) 
Here are the steps:
- Install Emacs 24
- Don't install any plugins
- Learn basic knowledge about [[http://en.wikipedia.org/wiki/Environment_variable][environment variable]] and [[http://en.wikipedia.org/wiki/Redirection_%28computing%29][pipe]]
- Read offical tutorial
- Use [[http://www.emacswiki.org/emacs/OrgMode][org-mode]]
- The only hot key you need learn in org-mode is TAB key

Use Emacs in this way for several days in order to understand:
- Why people love Emacs
- How Emacs interact with other programs
*** Read the official tutorial
Start Emacs, press ALT and X key together (M-x is used as abbreviation for Alt-X, C-x for Ctrl-X from now on). Input "help-with-tutorial", press ENTER. That's all you need to open the tutorial.

Reading this tutorial will take you about half an hour. It's not too much time to learn a life time skill.

Reading tutorial is essential. Do not skip this step. For example, many Emacs newbies asked me how to open online help for some command which could be answered by reading the tutorial.

*** Find *your first practical problem* Emacs can solve
That's the most important question you need ask yourself before you start.

The learning is like investment. If you can get huge benefit by investing a little time, you will be motivated and keep on the learning.

Me, for example, have spent many years looking for some time-management tool until I find the [[http://orgmode.org/][org-mode]] (a Emacs plugin).
*** Standing on the shoulders of giants
Please note *this section is the most important part* of the whole article!

I learned this lesson the hard way. At the beginning, I regarded Emacs as some geek's toy. I digged around the internet for the elisp code I can pasted into my ~/.emacs.

That's totally a waste of time if my goal is to become an Emacs master!

I should copy the master [[https://github.com/purcell/emacs.d][Steve Purcell's]] setup at the beginning!

Please don't repeat my mistake. Don't hesitate. Just follow Steven Purcell!

Let me be blunt. You are a newbie, you'd better copy and study top geek's code. Don't try to be creative at this stage. You'll waste your time trying to re-invent the wheel.

For example, some readers tell me that Emacs has too many hot keys. They can't memorize all of them. This is typical behavior in newbies. They assume that top geeks can remember more key bindings.

Wrong!

If you have studied any guru's setup, you will find that she use "smex" to remember the frequently used command, as it is often more efficient than pressing hot keys. So masters don't remember key bindings intentionally.

Since Steve Purcell loves new technologies and update his setup frequently, it may be a little harder to follow him for beginners.

That's actually great. I'm lucky to pick up his setup and stick to it. Simply pulling from his git branch gets me updated with the latest cool things in community.

When I say "on the shoulders of giants", I'm stressing that you need set your standard higher on your first setup. I'm NOT saying top guy's setup is "newbie friendly", not at all. If it happens to be "friendly", it's just the coincidence.

This section is discussing *what's the most efficient way to be good, not the easiest way*.

There is a huge difference between efficient and easy. For example, a setup using Vim key bindings is absolutely NOT easy for newbie but definitely efficient.

If you are still not convinced, consider my reasons:
- When I say mastering Emacs, I mean it. It's not OK at Emacs. It's not good at Emacs. It's actually among the best ones.
- Those giants are more intelligent than me. They are harder working than me. How can I reach their level as quickly as possible?
- The obvious way is to join them.
- If you can report a bug about the master's setup, at least in that moment, you have proven you are better at a certain issue than the master.
- You will get guidance from the master when she analyzes your bug report.

Anyway, if you find Purcell is too technically challenging to follow (What a pity, BTW), there is more stable setup like [[http://eschulte.github.io/emacs-starter-kit/][Eric Schulte's Emacs Starter Kit]].
** Join the community
I suggest focusing on Emacs only in order to take full advantage of communities.

For example, although Quora.com has lots of interesting stuffs, *do not* read/subscribe/follow them unless it's highly releated to Emacs.
*** Google Plus
[[https://plus.google.com/communities/114815898697665598016][Emacs community on 
Google Plus]] is the best Emacs community. The average quality of discuss on Google Plus is better than other communities.

BTW, the famous Emacs geek [[https://plus.google.com/113859563190964307534][Xah Lee]] hosts a Q/A session at Google Plus every Tuesday. His web site is [[http://xahlee.org/]]. His site is especially useful for elisp programming.

*** Github
It's a developer's social network.

You can search [[https://github.com/languages/Emacs%20Lisp]] for latest Elisp code.
*** Emacs blogs
[[http://planet.emacsen.org/][Planet Emacsen]] is the collection of several Emacs blogs.
*** Quora.com
I suggest following the question on more specific topic instead general one. For example, "What's the best Emacs addon" is a more useful question than "How to learn Emacs".


Everybody has something to say about a general question. But to answer a specific question, you need actual experience and knowledge.

Even if you are only interestd in general questions, starting from more practical question is still better. You can find the real master from that question.
*** Blogs
[[http://planet.emacsen.org/][Planet Emacsen]] is the best collection of Emacs related blogs.
*** Twitter
I use keyword "emacs :en" to search latest news. The reason to search English only twitter is that there are lots of Japanese post and I don't know Japanese.
*** StackOverflow
google: "emacs-related-keywords site:stackoverflow.com"

The quality on stackoverflow discussion is good but there are not many new questions about Emacs there.
*** Youtube
There are lots of wonderful Emacs videos on youtube. For example,
[[http://www.youtube.com/watch?feature=player_embedded&v=oJTwQvgfgMM][Emacs Org-mode - a system for note-taking and project planning]] is the tutorial which enlighten me on using org-mode. Carsten Dominik makes me realize that org-mode is simple. All I need remember is pressing "TAB" key to expand a text node. That's the killer feature of org-mode. All the other stuff could be regarded as bonus and can be postponed.

The issue of youtube is that the best matched are listed first. So you will always see the same results. I suggest sorting the results by upload date.
** Readings
*** EmacsWiki
[[http://www.emacswiki.org/emacs/][EmacsWiki]] has all the tips you need for tweak the Emacs. It's actively maintained by the community.

*** Emacs Lisp book
The only paper book you need read is [[http://www.amazon.com/Writing-GNU-Emacs-Extensions-Glickstein/dp/1565922611][Writing GNU Emacs Extensions]] by Bob Glickstein. I like his style and the way he organizes chapters.

Xah Lee [[http://ergoemacs.org/emacs/buy_xah_emacs_tutorial.html][Emacs Lisp tutorial]] is good and easy to read.

Steve Yegge's [[http://steve-yegge.blogspot.com.au/2008/01/emergency-elisp.html][Emergency Elisp]] is great because it's short and includes all necessary knowledge for writing Emacs Lisp.
** Knowledge management 
*** Place your setup at Github, *publicly*
I uploaded my setup onto [[https://github.com/redguardtoo/emacs.d]].

Version control is the most efficient way of knowledge management because you will never lose the setup.

I benefit a lot by sharing. People who use my setup are actually doing the QA for me.

For example, people reported that I mixed some personal stuff (my personal email, full path of my hobby project) into my setup which they need remove before usage. They expected it usable out of the box.

So I re-organized it and placed private stuff into a independent file named "privacy.el". That file is outside of my Emacs configuration. Then it occurred to me that in corporate environment it was not safe to store plain privacy.el on a shared computer without encryption. After some research, I found Emacs already provided [[http://www.emacswiki.org/emacs/EasyPG][a perfect solution]] for this issue since version 23.

*** Dropbox
I place all the Emacs related documents at Dropbox. Since dropbox will synchronize the documents into my mobile phone. I can study Emacs when commuting.
** My favorite Emacs addons
I'm not suggesting these addons are the best ones you must use. There are many other alternatives which are at least as good as in the list.

Please try these addons at least once. You will understand what is my expectation on average quality of addons.

| Name                | Description                                  | Alternatives                      |
|---------------------+----------------------------------------------+-----------------------------------|
| [[http://www.emacswiki.org/emacs/Evil][Evil]]                | convert Emacs to vim                         | none                              |
| Org                 | GTD                                          | none                              |
| company-mode        | code completion                              | cedet, auto-complete              |
| expand-region       | selection region efficiently                 | none                              |
| smex                | Input command efficiently                    | none                              |
| yasnippet           | text template                                | none                              |
| flymake-xxxx        | addons whose prefix is flymake. Syntax check. | flycheck                          |
| helm                | a framework to choose candidates             | ido                               |
| ido                 | similar to helm                              | helm                              |
| js2-mode            | everything for javascript                    | javascript-mode,js-mode,js3-mode  |
| w3m                 | browser                                      | Eww                               |
| elnode              | web server                                   | none                              |
| smartparens         | auto insert matched parens                   | autopair                          |
| [[https://github.com/nschum/window-numbering.el][window-numbering.el]] | jump focus between sub-windows               | switch-window.el                  |
| [[https://github.com/fxbois/web-mode][web-mode]]            | everything for edit HTML templates           | nxml-mode、nxhtml-mode、html-mode |

** Emacs is a way of life
Emacs guys have different ways of life. They are basically people who are hacking Lisp code for fun. Sometimes they will get the job done in a creative way. For example, [[http://sachachua.com/blog/][Sacha Chua]] mentioned that [[http://sachachua.com/blog/2012/07/transcript-emacs-chat-john-wiegley/][she let Emacs read the manual when cooking]].

So *what benefit* can I get if I understand the Emacs way?

When I learned Emacs, I could not endure the default key bindings of my browser Firefox. So I installed a Firefox addon [[https://github.com/mooz/keysnail/wiki][Keysnail]] to convert Firefox into Emacs. That basically double my speed on browser navigation. I am doing web development these days. Browser navigation is my daily job.

Since I already knew *the way*. I immediately realized that Keysnail was awesome because [[https://github.com/mooz][its developer mooz]] was awesome. I wanted to follow him and used whatever he used. Then I found his [[https://github.com/mooz/percol][percol]] which made all my operations  (git, [[http://blog.binchen.org/posts/how-to-do-the-file-navigation-efficiently.html][file navigation]], database management ...) under Bash shell ten times faster.

After knowing *the way*, things used to be important become trivial now. For example, I don't care which text editor has better file browser now. Why should I use any file explorer if I can be ten times faster in shell?

I'm also more willing to share my code. For example, some colleague asked me to share my file navigation snippet. I gave away the snippet without hesitation. If he regarded the technology as some black magic and sharing knowledge means giving up power, then he had already lost in the competition, if there was any competition. Because we are living in the world of science and engineering, I improve myself *more quickly* by sharing to the best, by learning from the best everyday. He just knew the static knowledge I had already knew. That knowledge would be outdated soon. Anyway, anyone used my shared snippet would still do me good by regarding knowledge sharing as a favor, by doing QA of my snippet as a user.
** FAQ
*** Any documentation on Steve Purcell's setup?
Nope. Read its README and code comment. The header of the code file usually has some usage guide.
*** Any simpler setup than Steve Pucell?
Check out  [[https://github.com/redguardtoo/emacs.d][my setup]].

I do some desktop development. So it has less web stuff than Purcell.
*** As a Vi guy, why should I turn to Emacs?
I am a Vi guy. I turn to Emacs because it's powerful and it can be extended with Lisp.

Vi is efficient in text editing because its model editing. In Emacs, you can use [[http://www.emacswiki.org/emacs/Evil][Evil]] to simulate Vim.
*** I don't like Emacs key bindings
[[http://ergoemacs.org/][ergoemacs]] if you prefer Microsoft's key bindings.
*** Emacs has too many key bindings to memorise
Use [[http://www.emacswiki.org/Smex][Smex]]. It's a myth that Emacs guru need remember lots of key bindings.
*** I am not comfortable with other people's setup. Can I modify it?
Try to understand master's setup at first. Don't make judgment too early. It's easy to make judgment. But understanding needs wisdom and hard work.

For example, some people reported that there is some weird character at column 80 when editing a file. That's actually a feature to remind you not to create line more than 80 columns. [[http://www.emacswiki.org/emacs/EightyColumnRule][Here is the reason]].

*** I've cloned the master's setup but the package is not updated. No error message.
Remove the file .emacs in your HOME directory. The ~/.emacs.d/init.el has same functionality.
*** If you have any specific question about Emacs
Please,
- read official tutorial
- google
For example, google "emacswiki init.el" to understand what's the init.el
*** I got some error message when starting Emacs with master's setup
That message could be ignored. It's often just the warning message when Emacs can't find some OPTIONAL third party command line tool.

If you need install that missing tool, search the list in [[https://github.com/redguardtoo/emacs.d][my readme]].

If you are sure it's actually an error message instead of a warning message, 
- Run "emacs -nw --debug-init" in terminal.
- Send the output to the author of the setup.
- Please use bug tracker if possible.

*** My simple setup is more controllable
That's what I thought at the beginning. After several months I realized that I could never be as good as a master like Steve Purcell if keeping this way.

While I spend serveral weeks to overcome some minor issues in Emacs setup, Purcell has already installed/developed dozens of cool plugins.

If I cannot win, the only strategy is to join him, that's why I clone his setup and start to report bug for him. Here is [[https://github.com/purcell/emacs.d/issues/6][first issue I reported]]. Besides, reporting bugs also gives me the opportunity to talk with the master.

So don't run away from the master's huge setup. Regard it as a challenge to improve yourself.
*** Why I cannot add my own plugins after using the master's setup
Though the quality of Emacs plugins are generally good, they may have compatibility issues. It's usually because plugins are developed by different people. For example, both [[https://github.com/auto-complete][auto-complete]] and [[https://github.com/capitaomorte/yasnippet][yasnippet]] will use TAB key to expand code. So there is confict if I use both plugins.

That's another reason to stick to the master's setup at the beginning.
*** How to use Emacs on windows
Install Cygwin!

When you have enough knowledge about environment variables and pipe. You can check [[http://stackoverflow.com/questions/3286723/emacs-cygwin-setup-under-windows/13245173#13245173][My answer at stackoverflow]] to use native windows version.

*** Is code-navigation and code-completion as good as IDE?
Thanks to [[http://clang.llvm.org/][clang]] && [[http://www.gnu.org/software/global/][GNU Global]], C++ is perfect now. Support for other languages are also good enough. 
*** Why Emacs cannot download packages?
If you are living in North Korea, Iran, China, you need below command line to start Emacs:
#+BEGIN_SRC elisp
http_proxy=your-proxy-server-ip:port emacs -nw
#+END_SRC

How to configure proxy server is not covered here.
*** As a greenhand of Emacs, should I learn Emacs lisp at first?
NO. Most people lose the interest in Lisp because there is not enough stimulus. You can finish the Java/C#/Javascript course because that's required by profitable jobs.

That's why I stress that you need avoid tweaking Emacs. Please copy the master's setup at first.

Unless you have seen how the Lisp code gets your job done, you will not have the enough stimulus to *finish* the lisp course.
*** After knowing the basic operation of Emacs, what should I learn next?
Find your practical problem which only Emacs can do best. Trust me, Emacs is much more powerful than your wildest imagination.

Here is my example:
- When I use wordpress blog, I use [[https://github.com/punchagan/org2blog][org2blog]] to post articles. It's ten times faster than any other client.
- I installed cmake-mode to do the cross-platform development with [[http://www.cmake.org/Wiki/CMake/Editors/Emacs][cmake]].
- window-numbering.el is useful when jumping focus between sub-windows.
- When I work for some huge projects, I use [[https://github.com/redguardtoo/evil-nerd-commenter][evil-nerd-commenter]] to comment code lines because I need deal with too many programming languages. 

*** What do you think "Emacs can do everything"?
Yes, there are *demos* to prove Emacs can do everything.

But I'm a practical guy. I only care what's the most efficient way to get the job done. The reason I stick to Emacs in most cases is simply because Emacs is the best solution.

Sometimes Emacs might not be the best tool even its demo looks good.

[[gnu.org/software/emacs/manual/html_node/emacs/Document-View.html][DocView mode]] is boasted as a proof that Emacs could be used as a PDF viewer. You can open two sub-windows in Emacs. One for viewing PDF. The other for coding.

It's actually not a perfect solution because Emacs needs call some command line tool to convert the PDF into png image before displaying the PDF. It's slow and costs too much memory. Besides, it's impossible to extract text from the Emacs PDF viewer. That's a show stopper if I'm viewing a programming ebook because I cannot paste code from PDF.

There are tons of other perfect PDF viewers. They are quick. They can handle huge PDF files. Text embedded in PDF can be extracted.

Even if you want to display the PDF viewer and code editor side by side. Emacs is still not a better solution. Tile windows managers like [[http://i3wm.org/][i3]] is a professional tool to handle these things.
** Contact me
My [[https://twitter.com/#!/chen_bin][twitter]] and [[https://plus.google.com/110954683162859211810][google plus]].

My blog is [[http://blog.binchen.org]].

Please don't ask me basic questions since I've already shown you how to find the answer.
** Summary
Start from fun, follow the best people, reading and practice.

I recognize that all roads lead to Rome. So other methods may also work. But my method DID work on me.

This article is basically the summary of how I figure out my way to Rome.

My only suggestion is, it does not matter which way you take, what matters is to regard Emacs as professional's tool. It deserves your highest respect.

*** Report bug
This article is published at [[https://github.com/redguardtoo/mastering-emacs-in-one-year-guide]].

Please use github's bug tracker instead of sending me email for your own good. Github notification mail is always in my first priority folder.

*** I will provide long-term update
Emacs is actually more a platform than a software. Interesting people and addons keep popping up on that platform. I will update this article from time to time in the future.